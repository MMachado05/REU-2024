#!/usr/bin/env python3
PACKAGE = "preprocessors_pkg"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("display_preprocessed_image", bool_t, 0, "Display preprocessed image", False)

initial_crop = gen.add_group("1 Initial crop")
initial_crop.add("initial_crop_top", int_t, 0, "Initial crop top", 0, 0, 100)
initial_crop.add("initial_crop_bottom", int_t, 0, "Initial crop bottom", 100, 0, 100)
initial_crop.add("initial_crop_left", int_t, 0, "Initial crop left", 0, 0, 100)
initial_crop.add("initial_crop_right", int_t, 0, "Initial crop right", 100, 0, 100)

poly_crop = gen.add_group("2 Poly mask")
poly_crop.add("use_poly_mask", bool_t, 0, "Use poly mask", False)
poly_crop.add("top_left", int_t, 0, "Top left", 25, 0, 100)
poly_crop.add("bottom_left", int_t, 0, "Bottom left", 50, 0, 100)
poly_crop.add("top_right", int_t, 0, "Top right", 75, 0, 100)
poly_crop.add("bottom_right", int_t, 0, "Bottom right", 50, 0, 100)

warp_perspective = gen.add_group("3 Warp perspective")
warp_perspective.add("use_warp_perspective", bool_t, 0, "Use warp perspective", False)
warp_perspective.add("topleft_x", int_t, 0, "Top left x", 0, 0, 100)
warp_perspective.add("topleft_y", int_t, 0, "Top left y", 0, 0, 100)
warp_perspective.add("topright_x", int_t, 0, "Top right x", 79, 0, 100)
warp_perspective.add("topright_y", int_t, 0, "Top right y", 0, 0, 100)
warp_perspective.add("bottomright_x", int_t, 0, "Bottom right x", 49, 0, 100)
warp_perspective.add("bottomright_y", int_t, 0, "Bottom right y", 100, 0, 100)
warp_perspective.add("bottomleft_x", int_t, 0, "Bottom left x", 34, 0, 100)
warp_perspective.add("bottomleft_y", int_t, 0, "Bottom left y", 100, 0, 100)

live_crop_settings = gen.add_group("3 Live crop settings")
live_crop_settings.add("use_live_crop", bool_t, 0, "Use live cropping", False)
live_crop_settings.add("live_crop_weight", double_t, 0, "Live cropping weight", 0.5, 0.0, 1.0)

median_blur = gen.add_group("4 Median blur")
median_blur.add("use_median_blur", bool_t, 0, "Use median blur", True)

white_filter_settings = gen.add_group("5 White filter settings")
white_filter_settings.add("filter_white", bool_t, 0, "Filter white", True)
white_filter_settings.add("white_thresh", int_t, 0, "White threshold", 220, 0, 255)

canny_settings = gen.add_group("6 Canny settings")
canny_settings.add("use_canny", bool_t, 0, "Use Canny edge detection", True)
canny_settings.add("canny_lower_thresh", int_t, 0, "Canny lower threshold", 50, 0, 255)
canny_settings.add("canny_upper_thresh", int_t, 0, "Canny upper threshold", 150, 0, 255)

exit(gen.generate(PACKAGE, "preprocessors_pkg", "Preprocessor"))
