#! /usr/bin/env python3

# Motivated by https://github.com/swift-nav/libsbp/blob/master/generator/sbpg/generator.py

import ros_renderer as renderer

import sbpg.specs.yaml2 as yaml
import os
import argparse
import pprint

def create_directory(libsbp_ros_msgs_dir, dir):
    dir = os.path.abspath(libsbp_ros_msgs_dir + dir)
    try:
        os.makedirs(dir)
    except OSError:
        if not os.path.isdir(dir):
            raise
    return dir

def get_args():
    parser = argparse.ArgumentParser(description='ROS SBP message generator.')
    parser.add_argument('cmake_binary_dir',
                        nargs=1,
                        help='The location of the build space.')
    parser.add_argument('libsbp_ros_msgs_dir',
                        nargs=1,
                        help='Pass the base path of the source.')
    parser.add_argument('-v',
                        '--verbose',
                        action="store_true",
                        help='Print debugging info.')
    return parser

def is_deprecated(definition):
    if 'DEP' in definition.identifier.upper():
        return True
    if definition.desc and 'legacy' in definition.desc:
        return True
    if definition.desc and any(item in definition.desc for item in ['legacy', 'Dep']):
        return True
    if definition.short_desc and any(item in definition.short_desc for item in ['legacy', 'Dep']):
        return True
    return False

def is_empty(definition):
    return len(definition.fields) == 0

if __name__ == '__main__':
    # Parse input arguments.
    args = get_args().parse_args()
    renderer.setup_environment(args.libsbp_ros_msgs_dir[0])

    # Get the SBP specs.
    input_dir = os.path.abspath(args.cmake_binary_dir[0] + '/../libsbp_catkin/libsbp-prefix/src/libsbp/spec/yaml/swiftnav/sbp/')
    file_index = yaml.resolve_deps(*yaml.get_files(input_dir))

    # Output directories.
    msg_dir = create_directory(args.libsbp_ros_msgs_dir[0], '/msg')
    include_dir = create_directory(args.libsbp_ros_msgs_dir[0], '/include/libsbp_ros_msgs')
    src_dir = create_directory(args.libsbp_ros_msgs_dir[0], '/src')

    if args.verbose:
        print("Reading files...")
        pprint.pprint(list(file_index.keys()))
        print("Writing to...\n%s\n%s\n%s" % (include_dir, src_dir, msg_dir))

    # Parse specs and filter out undesired messages.
    file_index_items = sorted(file_index.items(), key=lambda f: f[0])
    all_specs = []
    for fname, spec in file_index_items:
        parsed = yaml.parse_spec(spec)
        if not parsed.render_source:
          continue
        parsed.definitions = [definition for definition in parsed.definitions if not is_deprecated(definition)]
        parsed.definitions = [definition for definition in parsed.definitions if not is_empty(definition)]
        if len(parsed.definitions) == 0:
            continue;
        all_specs.append(parsed)

    # Render.
    renderer.render_msgs(msg_dir, all_specs, args.verbose)
    renderer.render_conversion_header(include_dir, all_specs, args.verbose)
    renderer.render_conversion_src(src_dir, all_specs, args.verbose)
    renderer.render_cb_export(include_dir, all_specs, args.verbose)
